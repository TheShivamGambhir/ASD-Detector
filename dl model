{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "print(\"Autism Classification for kids based on facial image\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Autism Classification for kids based on facial image\n"
          ]
        }
      ],
      "execution_count": 111,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:46:21.195Z",
          "iopub.execute_input": "2021-03-19T15:46:21.212Z",
          "iopub.status.idle": "2021-03-19T15:46:21.239Z",
          "shell.execute_reply": "2021-03-19T15:46:21.252Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from pathlib import Path\n",
        "from keras.preprocessing import image\n",
        "import matplotlib.pyplot as plt"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T19:27:35.105Z",
          "iopub.execute_input": "2021-04-25T19:27:35.122Z",
          "shell.execute_reply": "2021-04-25T19:27:35.462Z",
          "iopub.status.idle": "2021-04-25T19:27:35.495Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "image_paths = []\n",
        "img_data = []\n",
        "labels = []\n",
        "labels_dict = {\"autistic\":1, \"non_autistic\":0}\n",
        "reverse_dict = {1: \"autistic\", 0: \"non_autistic\"}"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:58:44.511Z",
          "iopub.execute_input": "2021-04-25T18:58:44.537Z",
          "iopub.status.idle": "2021-04-25T18:58:44.573Z",
          "shell.execute_reply": "2021-04-25T18:58:44.402Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p = Path(\"./images/total\")\n",
        "dirs = p.glob(\"*\")\n",
        "for d in dirs:\n",
        "  label = (str(d).split(\"\\\\\")[-1])\n",
        "  print(\"label:\", label)\n",
        "  cnt = 0 \n",
        "  print(\"directory_name:\", d)\n",
        "  for img_path in d.glob(\"*.jpg\"):\n",
        "    img = image.load_img(img_path, target_size = (224, 224))\n",
        "    img_array = image.img_to_array(img)\n",
        "    img_data.append(img_array)\n",
        "    labels.append(labels_dict[label])\n",
        "    cnt += 13\n",
        "  print(cnt)\n",
        "  "
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "label: autistic\n",
            "directory_name: images\\total\\autistic\n",
            "19084\n",
            "label: non_autistic\n",
            "directory_name: images\\total\\non_autistic\n",
            "19084\n"
          ]
        }
      ],
      "execution_count": 3,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:58:45.652Z",
          "iopub.execute_input": "2021-04-25T18:58:45.688Z",
          "iopub.status.idle": "2021-04-25T18:59:11.359Z",
          "shell.execute_reply": "2021-04-25T18:59:11.492Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# VISUALIZATION"
      ],
      "outputs": [],
      "execution_count": 115,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:46:29.353Z",
          "iopub.execute_input": "2021-03-19T15:46:29.364Z",
          "iopub.status.idle": "2021-03-19T15:46:29.385Z",
          "shell.execute_reply": "2021-03-19T15:46:29.397Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "outputs": [],
      "execution_count": 6,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:59:35.646Z",
          "iopub.execute_input": "2021-04-25T18:59:35.674Z",
          "iopub.status.idle": "2021-04-25T18:59:35.707Z",
          "shell.execute_reply": "2021-04-25T18:59:35.731Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(img_data))\n",
        "print(len(labels))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2936\n",
            "2936\n"
          ]
        }
      ],
      "execution_count": 7,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:59:37.106Z",
          "iopub.execute_input": "2021-04-25T18:59:37.128Z",
          "iopub.status.idle": "2021-04-25T18:59:37.194Z",
          "shell.execute_reply": "2021-04-25T18:59:37.222Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = np.array(img_data)\n",
        "print(X.shape)\n",
        "X/=255.0"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2936, 224, 224, 3)\n"
          ]
        }
      ],
      "execution_count": 8,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:59:38.408Z",
          "iopub.execute_input": "2021-04-25T18:59:38.433Z",
          "iopub.status.idle": "2021-04-25T18:59:39.086Z",
          "shell.execute_reply": "2021-04-25T18:59:39.054Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = np.array(labels)\n",
        "#y = y.reshape((2936,1))\n",
        "y.shape"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "(2936,)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:59:40.996Z",
          "iopub.execute_input": "2021-04-25T18:59:41.017Z",
          "shell.execute_reply": "2021-04-25T18:59:41.085Z",
          "iopub.status.idle": "2021-04-25T18:59:41.062Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (10,2))\n",
        "\n",
        "plt.imshow(X[0])"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 179,
          "data": {
            "text/plain": "<matplotlib.image.AxesImage at 0x29a40e66be0>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 720x144 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 179,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T18:08:30.349Z",
          "iopub.execute_input": "2021-03-19T18:08:30.369Z",
          "iopub.status.idle": "2021-03-19T18:08:30.415Z",
          "shell.execute_reply": "2021-03-19T18:08:30.430Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.utils import shuffle\n",
        "from sklearn.model_selection import train_test_split\n",
        "X, y = shuffle(X, y)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:59:46.735Z",
          "iopub.execute_input": "2021-04-25T18:59:46.758Z",
          "iopub.status.idle": "2021-04-25T18:59:48.754Z",
          "shell.execute_reply": "2021-04-25T18:59:48.719Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape)\n",
        "print(y_train.shape)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2055, 224, 224, 3)\n",
            "(2055,)\n"
          ]
        }
      ],
      "execution_count": 181,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T18:08:35.502Z",
          "iopub.execute_input": "2021-03-19T18:08:35.519Z",
          "iopub.status.idle": "2021-03-19T18:08:35.549Z",
          "shell.execute_reply": "2021-03-19T18:08:35.564Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_train[:5]"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 123,
          "data": {
            "text/plain": "array([0, 1, 0, 1, 1])"
          },
          "metadata": {}
        }
      ],
      "execution_count": 123,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:46:42.709Z",
          "iopub.execute_input": "2021-03-19T15:46:42.721Z",
          "iopub.status.idle": "2021-03-19T15:46:42.747Z",
          "shell.execute_reply": "2021-03-19T15:46:42.758Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_sample(X, Y, index):\n",
        "  label  = Y[index]\n",
        "  plt.figure(figsize = (15,2))\n",
        "  plt.imshow(X_train[index])\n",
        "  plt.xlabel(reverse_dict[label])"
      ],
      "outputs": [],
      "execution_count": 182,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T18:10:43.936Z",
          "iopub.execute_input": "2021-03-19T18:10:43.953Z",
          "iopub.status.idle": "2021-03-19T18:10:43.979Z",
          "shell.execute_reply": "2021-03-19T18:10:43.994Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plot_sample(X_train, y_train, 8)"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1080x144 with 1 Axes>",
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 183,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T18:10:44.677Z",
          "iopub.execute_input": "2021-03-19T18:10:44.694Z",
          "iopub.status.idle": "2021-03-19T18:10:44.727Z",
          "shell.execute_reply": "2021-03-19T18:10:44.765Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import keras"
      ],
      "outputs": [],
      "execution_count": 11,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:59:53.827Z",
          "iopub.execute_input": "2021-04-25T18:59:53.850Z",
          "iopub.status.idle": "2021-04-25T18:59:53.878Z",
          "shell.execute_reply": "2021-04-25T18:59:53.896Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import keras\n",
        "ann = keras.Sequential([\n",
        "  keras.layers.Flatten(input_shape = (224, 224, 3)),\n",
        "  keras.layers.Dense(3000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(2, activation = 'sigmoid')\n",
        "])\n",
        "ann.compile(optimizer = 'SGD',\n",
        "           loss = 'sparse_categorical_crossentropy',\n",
        "           metrics=['accuracy'])\n",
        "ann.fit(X_train, y_train, epochs = 3)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "65/65 [==============================] - 87s 1s/step - loss: 4.3107 - accuracy: 0.4810\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/3\n",
            "65/65 [==============================] - 82s 1s/step - loss: 0.6798 - accuracy: 0.5662\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/3\n",
            "65/65 [==============================] - 88s 1s/step - loss: 0.6857 - accuracy: 0.5487\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "<tensorflow.python.keras.callbacks.History at 0x17fea7631f0>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 12,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T18:59:56.667Z",
          "iopub.execute_input": "2021-04-25T18:59:56.704Z",
          "iopub.status.idle": "2021-04-25T19:04:24.467Z",
          "shell.execute_reply": "2021-04-25T19:04:24.705Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "ann.save('ann.h5')"
      ],
      "outputs": [],
      "execution_count": 17,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T19:09:47.751Z",
          "iopub.execute_input": "2021-04-25T19:09:47.776Z",
          "iopub.status.idle": "2021-04-25T19:09:54.137Z",
          "shell.execute_reply": "2021-04-25T19:09:54.164Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "ann = load_model('ann.h5')"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T19:25:46.300Z",
          "iopub.execute_input": "2021-04-25T19:25:46.317Z",
          "shell.execute_reply": "2021-04-25T19:25:53.237Z",
          "iopub.status.idle": "2021-04-25T19:25:53.256Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "img_data = []\n",
        "myimg = image.load_img('sg.jpeg', target_size = (224, 224))\n",
        "img_array = image.img_to_array(myimg)\n",
        "img_data.append(img_array)\n",
        "X = np.array(img_data)\n",
        "print(X.shape)\n",
        "X/=255.0\n",
        "plt.imshow(X[0])"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 224, 224, 3)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "<matplotlib.image.AxesImage at 0x1a1f0c52130>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 17,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T19:32:47.754Z",
          "iopub.execute_input": "2021-04-25T19:32:47.769Z",
          "iopub.status.idle": "2021-04-25T19:32:47.865Z",
          "shell.execute_reply": "2021-04-25T19:32:47.917Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ann.predict(X)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "array([[0.25376529, 0.68151575]], dtype=float32)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-04-25T19:33:23.340Z",
          "iopub.execute_input": "2021-04-25T19:33:23.356Z",
          "iopub.status.idle": "2021-04-25T19:33:23.600Z",
          "shell.execute_reply": "2021-04-25T19:33:23.617Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ann2 = keras.Sequential([\n",
        "  keras.layers.Flatten(input_shape = (32, 32, 3)),\n",
        "  keras.layers.Dense(3000, activation = 'relu'),\n",
        "  keras.layers.Dense(3000, activation = 'relu'),\n",
        "  keras.layers.Dense(3000, activation = 'relu'),\n",
        "  keras.layers.Dense(3000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(1000, activation = 'relu'),\n",
        "  keras.layers.Dense(2, activation = 'sigmoid')\n",
        "])\n",
        "ann2.compile(optimizer = 'SGD',\n",
        "           loss = 'sparse_categorical_crossentropy',\n",
        "           metrics=['accuracy'])\n",
        "ann2.fit(X_train, y_train, epochs = 10)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "65/65 [==============================] - 11s 167ms/step - loss: 0.6926 - accuracy: 0.5154\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/10\n",
            "65/65 [==============================] - 19s 290ms/step - loss: 0.6892 - accuracy: 0.6125\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/10\n",
            "65/65 [==============================] - 15s 226ms/step - loss: 0.6810 - accuracy: 0.6443\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/10\n",
            "65/65 [==============================] - 9s 131ms/step - loss: 0.6691 - accuracy: 0.6618\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/10\n",
            "65/65 [==============================] - 10s 155ms/step - loss: 0.6471 - accuracy: 0.6910\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/10\n",
            "65/65 [==============================] - 18s 282ms/step - loss: 0.6358 - accuracy: 0.6407\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/10\n",
            "65/65 [==============================] - 19s 296ms/step - loss: 0.6284 - accuracy: 0.6377\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/10\n",
            "65/65 [==============================] - 18s 269ms/step - loss: 0.6088 - accuracy: 0.6807\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 9/10\n",
            "65/65 [==============================] - 19s 292ms/step - loss: 0.5928 - accuracy: 0.6861\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 10/10\n",
            "65/65 [==============================] - 19s 288ms/step - loss: 0.5775 - accuracy: 0.7067\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 130,
          "data": {
            "text/plain": "<tensorflow.python.keras.callbacks.History at 0x29a42437cd0>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 130,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:47:42.476Z",
          "iopub.execute_input": "2021-03-19T15:47:42.500Z",
          "shell.execute_reply": "2021-03-19T15:50:19.445Z",
          "iopub.status.idle": "2021-03-19T15:50:19.356Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ann2.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28/28 [==============================] - 2s 37ms/step - loss: 0.6439 - accuracy: 0.6345\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 131,
          "data": {
            "text/plain": "[0.6439284682273865, 0.6345062255859375]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 131,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:53:21.375Z",
          "iopub.execute_input": "2021-03-19T15:53:21.398Z",
          "iopub.status.idle": "2021-03-19T15:53:22.893Z",
          "shell.execute_reply": "2021-03-19T15:53:22.929Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import keras"
      ],
      "outputs": [],
      "execution_count": 60,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:02:08.903Z",
          "iopub.execute_input": "2021-03-11T11:02:08.912Z",
          "iopub.status.idle": "2021-03-11T11:02:08.927Z",
          "shell.execute_reply": "2021-03-11T11:02:08.934Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cnn = keras.models.Sequential([\n",
        "  keras.layers.Conv2D(32,(3,3), activation = \"relu\", padding = \"same\", input_shape =(32,32,3)),\n",
        "  keras.layers.MaxPooling2D(2),\n",
        "  keras.layers.Conv2D(128,3,activation=\"relu\",padding = \"same\"),\n",
        "  keras.layers.Conv2D(128,3,activation=\"relu\",padding = \"same\"),\n",
        "  keras.layers.MaxPooling2D(2),\n",
        "  keras.layers.Conv2D(256,3,activation=\"relu\",padding = \"same\"),\n",
        "  keras.layers.Conv2D(256,3,activation=\"relu\",padding = \"same\"),\n",
        "  keras.layers.MaxPooling2D(2),\n",
        "  keras.layers.Dense(128, activation=\"relu\"),\n",
        "  keras.layers.Dropout(0.5),\n",
        "  keras.layers.Dense(64,activation=\"relu\"),\n",
        "  keras.layers.Dropout(0.5),\n",
        "  keras.layers.Dense(2,activation=\"softmax\")\n",
        "])"
      ],
      "outputs": [],
      "execution_count": 82,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:16:41.833Z",
          "iopub.execute_input": "2021-03-11T11:16:41.847Z",
          "iopub.status.idle": "2021-03-11T11:16:41.901Z",
          "shell.execute_reply": "2021-03-11T11:16:41.918Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cnn.compile(optimizer = 'SGD',\n",
        "           loss = 'sparse_categorical_crossentropy',\n",
        "           metrics=['accuracy'])\n",
        "cnn.fit(X_train, y_train, epochs = 8)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "InvalidArgumentError",
          "evalue": " logits and labels must have the same first dimension, got logits shape [512,2] and labels shape [32]\n\t [[node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits (defined at <ipython-input-83-c5c1a390aaa8>:4) ]] [Op:__inference_train_function_17358]\n\nFunction call stack:\ntrain_function\n",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
            "\u001b[1;32m<ipython-input-83-c5c1a390aaa8>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m            \u001b[0mloss\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'sparse_categorical_crossentropy'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m            metrics=['accuracy'])\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mcnn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mepochs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m8\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[0;32m   1098\u001b[0m                 _r=1):\n\u001b[0;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1100\u001b[1;33m               \u001b[0mtmp_logs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1101\u001b[0m               \u001b[1;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args, **kwds)\u001b[0m\n\u001b[0;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    827\u001b[0m     \u001b[1;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 828\u001b[1;33m       \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"xla\"\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;34m\"nonXla\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py\u001b[0m in \u001b[0;36m_call\u001b[1;34m(self, *args, **kwds)\u001b[0m\n\u001b[0;32m    886\u001b[0m         \u001b[1;31m# Lifting succeeded, so variables are initialized and we can run the\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    887\u001b[0m         \u001b[1;31m# stateless function.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 888\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    889\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    890\u001b[0m       \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfiltered_flat_args\u001b[0m \u001b[1;33m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\function.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   2940\u001b[0m       (graph_function,\n\u001b[0;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m-> 2942\u001b[1;33m     return graph_function._call_flat(\n\u001b[0m\u001b[0;32m   2943\u001b[0m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0;32m   2944\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[1;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[0;32m   1916\u001b[0m         and executing_eagerly):\n\u001b[0;32m   1917\u001b[0m       \u001b[1;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1918\u001b[1;33m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[0;32m   1919\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\function.py\u001b[0m in \u001b[0;36mcall\u001b[1;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[0;32m    553\u001b[0m       \u001b[1;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    554\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 555\u001b[1;33m           outputs = execute.execute(\n\u001b[0m\u001b[0;32m    556\u001b[0m               \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    557\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[1;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[0;32m     57\u001b[0m   \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 59\u001b[1;33m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[0;32m     60\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[0;32m     61\u001b[0m   \u001b[1;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;31mInvalidArgumentError\u001b[0m:  logits and labels must have the same first dimension, got logits shape [512,2] and labels shape [32]\n\t [[node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits (defined at <ipython-input-83-c5c1a390aaa8>:4) ]] [Op:__inference_train_function_17358]\n\nFunction call stack:\ntrain_function\n"
          ]
        }
      ],
      "execution_count": 83,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:16:42.641Z",
          "iopub.execute_input": "2021-03-11T11:16:42.652Z",
          "iopub.status.idle": "2021-03-10T12:57:25.168Z",
          "shell.execute_reply": "2021-03-10T12:57:25.178Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#CONCOLUTIONAL NEURAL NETWORK CNN"
      ],
      "outputs": [],
      "execution_count": 77,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:04:54.433Z",
          "iopub.execute_input": "2021-03-11T11:04:54.443Z",
          "iopub.status.idle": "2021-03-11T11:04:54.460Z",
          "shell.execute_reply": "2021-03-11T11:04:54.467Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras import datasets, layers, models"
      ],
      "outputs": [],
      "execution_count": 17,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T14:45:45.896Z",
          "iopub.execute_input": "2021-03-19T14:45:45.912Z",
          "iopub.status.idle": "2021-03-19T14:45:45.931Z",
          "shell.execute_reply": "2021-03-19T14:45:45.945Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = models.Sequential()\n",
        "model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation='relu'))"
      ],
      "outputs": [],
      "execution_count": 76,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:24:20.304Z",
          "iopub.execute_input": "2021-03-19T15:24:20.319Z",
          "iopub.status.idle": "2021-03-19T15:24:20.343Z",
          "shell.execute_reply": "2021-03-19T15:24:20.413Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_11\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_21 (Conv2D)           (None, 30, 30, 32)        896       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_13 (MaxPooling (None, 15, 15, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_22 (Conv2D)           (None, 13, 13, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_14 (MaxPooling (None, 6, 6, 64)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_23 (Conv2D)           (None, 4, 4, 64)          36928     \n",
            "=================================================================\n",
            "Total params: 56,320\n",
            "Trainable params: 56,320\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "execution_count": 71,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:03:16.582Z",
          "iopub.execute_input": "2021-03-11T11:03:16.594Z",
          "iopub.status.idle": "2021-03-11T11:03:16.610Z",
          "shell.execute_reply": "2021-03-11T11:03:16.618Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(10))"
      ],
      "outputs": [],
      "execution_count": 72,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:03:18.972Z",
          "iopub.execute_input": "2021-03-11T11:03:18.981Z",
          "shell.execute_reply": "2021-03-11T11:03:19.001Z",
          "iopub.status.idle": "2021-03-11T11:03:18.994Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_11\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_21 (Conv2D)           (None, 30, 30, 32)        896       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_13 (MaxPooling (None, 15, 15, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_22 (Conv2D)           (None, 13, 13, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_14 (MaxPooling (None, 6, 6, 64)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_23 (Conv2D)           (None, 4, 4, 64)          36928     \n",
            "_________________________________________________________________\n",
            "flatten_8 (Flatten)          (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_64 (Dense)             (None, 64)                65600     \n",
            "_________________________________________________________________\n",
            "dense_65 (Dense)             (None, 10)                650       \n",
            "=================================================================\n",
            "Total params: 122,570\n",
            "Trainable params: 122,570\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "execution_count": 73,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:03:19.900Z",
          "iopub.execute_input": "2021-03-11T11:03:19.913Z",
          "iopub.status.idle": "2021-03-11T11:03:19.936Z",
          "shell.execute_reply": "2021-03-11T11:03:19.944Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf"
      ],
      "outputs": [],
      "execution_count": 18,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T14:45:55.536Z",
          "iopub.execute_input": "2021-03-19T14:45:55.548Z",
          "iopub.status.idle": "2021-03-19T14:45:55.569Z",
          "shell.execute_reply": "2021-03-19T14:45:55.581Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "model.fit(X_train, y_train, epochs = 8)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n",
            "65/65 [==============================] - 1s 14ms/step - loss: 1.0269 - accuracy: 0.4853\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.6716 - accuracy: 0.5721\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5810 - accuracy: 0.6949\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5543 - accuracy: 0.7047\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5592 - accuracy: 0.7040\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5268 - accuracy: 0.7293\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.4960 - accuracy: 0.7593\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.4821 - accuracy: 0.7738\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 74,
          "data": {
            "text/plain": "<tensorflow.python.keras.callbacks.History at 0x1541ae95100>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 74,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:03:23.517Z",
          "iopub.execute_input": "2021-03-11T11:03:23.527Z",
          "iopub.status.idle": "2021-03-11T11:03:31.689Z",
          "shell.execute_reply": "2021-03-11T11:03:31.713Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28/28 [==============================] - 0s 6ms/step - loss: 0.5388 - accuracy: 0.7446\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 76,
          "data": {
            "text/plain": "[0.5387905836105347, 0.7446084022521973]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 76,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:04:21.581Z",
          "iopub.execute_input": "2021-03-11T11:04:21.593Z",
          "iopub.status.idle": "2021-03-11T11:04:21.857Z",
          "shell.execute_reply": "2021-03-11T11:04:21.875Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn = models.Sequential([\n",
        "  layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "  layers.Flatten(),\n",
        "  layers.Dense(64, activation=\"relu\"),\n",
        "  layers.Dense(2,activation=\"softmax\")\n",
        "])"
      ],
      "outputs": [],
      "execution_count": 99,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:34:20.035Z",
          "iopub.execute_input": "2021-03-11T11:34:20.049Z",
          "iopub.status.idle": "2021-03-11T11:34:20.063Z",
          "shell.execute_reply": "2021-03-11T11:34:20.080Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "mycnn.fit(X_train, y_train, epochs = 8)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.6964 - accuracy: 0.5179\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.6034 - accuracy: 0.6704\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5428 - accuracy: 0.7316\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5556 - accuracy: 0.7126\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.5165 - accuracy: 0.7470\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.4857 - accuracy: 0.7537\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.4919 - accuracy: 0.7471\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.4321 - accuracy: 0.7935\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 100,
          "data": {
            "text/plain": "<tensorflow.python.keras.callbacks.History at 0x15406ca37f0>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 100,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:34:21.365Z",
          "iopub.execute_input": "2021-03-11T11:34:21.377Z",
          "iopub.status.idle": "2021-03-11T11:34:30.022Z",
          "shell.execute_reply": "2021-03-11T11:34:30.044Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28/28 [==============================] - 0s 6ms/step - loss: 0.5145 - accuracy: 0.7582\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 101,
          "data": {
            "text/plain": "[0.5145085453987122, 0.7582292556762695]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 101,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:34:55.541Z",
          "iopub.execute_input": "2021-03-11T11:34:55.553Z",
          "iopub.status.idle": "2021-03-11T11:34:55.800Z",
          "shell.execute_reply": "2021-03-11T11:34:55.821Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn2 = models.Sequential([\n",
        "  layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "  layers.MaxPooling2D((2,2)),  \n",
        "  layers.Flatten(),\n",
        "  layers.Dense(64, activation='sigmoid'),\n",
        "  layers.Dense(64, activation='sigmoid'),\n",
        "  layers.Dense(2,activation='softmax')\n",
        "])"
      ],
      "outputs": [],
      "execution_count": 168,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:53:59.202Z",
          "iopub.execute_input": "2021-03-11T11:53:59.219Z",
          "shell.execute_reply": "2021-03-11T11:53:59.260Z",
          "iopub.status.idle": "2021-03-11T11:53:59.239Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn2.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "mycnn2.fit(X_train, y_train, epochs = 8)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.7018 - accuracy: 0.4958\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.6920 - accuracy: 0.5018\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.6227 - accuracy: 0.6620\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5733 - accuracy: 0.7074\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.5958 - accuracy: 0.6960\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.5397 - accuracy: 0.7220\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.5075 - accuracy: 0.7386\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/8\n",
            "65/65 [==============================] - 1s 16ms/step - loss: 0.4885 - accuracy: 0.7568\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 169,
          "data": {
            "text/plain": "<tensorflow.python.keras.callbacks.History at 0x154324e6640>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 169,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:54:00.278Z",
          "iopub.execute_input": "2021-03-11T11:54:00.289Z",
          "iopub.status.idle": "2021-03-11T11:54:08.654Z",
          "shell.execute_reply": "2021-03-11T11:54:08.680Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn2.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28/28 [==============================] - 0s 6ms/step - loss: 0.5264 - accuracy: 0.7457\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 170,
          "data": {
            "text/plain": "[0.5264127850532532, 0.745743453502655]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 170,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T11:54:11.167Z",
          "iopub.execute_input": "2021-03-11T11:54:11.180Z",
          "iopub.status.idle": "2021-03-11T11:54:11.455Z",
          "shell.execute_reply": "2021-03-11T11:54:11.475Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn3 = models.Sequential([\n",
        "  layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Flatten(),\n",
        "  layers.Dense(64, activation='relu'),\n",
        "  layers.Dense(128, activation='relu'),\n",
        "  layers.Dense(2,activation='softmax')\n",
        "])"
      ],
      "outputs": [],
      "execution_count": 210,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T12:05:11.845Z",
          "iopub.execute_input": "2021-03-11T12:05:11.860Z",
          "iopub.status.idle": "2021-03-11T12:05:11.881Z",
          "shell.execute_reply": "2021-03-11T12:05:11.902Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycnn3.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "mycnn3.fit(X_train, y_train, epochs = 8)\n",
        "mycnn3.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.6949 - accuracy: 0.5176\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/8\n",
            "65/65 [==============================] - 1s 15ms/step - loss: 0.6551 - accuracy: 0.6080\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/8\n",
            "65/65 [==============================] - 2s 24ms/step - loss: 0.5704 - accuracy: 0.6998\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/8\n",
            "65/65 [==============================] - 3s 49ms/step - loss: 0.5347 - accuracy: 0.7296\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/8\n",
            "65/65 [==============================] - 3s 48ms/step - loss: 0.4894 - accuracy: 0.7574\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/8\n",
            "65/65 [==============================] - 3s 46ms/step - loss: 0.4530 - accuracy: 0.7721\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/8\n",
            "65/65 [==============================] - 3s 47ms/step - loss: 0.4369 - accuracy: 0.7808\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/8\n",
            "65/65 [==============================] - 3s 46ms/step - loss: 0.3613 - accuracy: 0.8430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "28/28 [==============================] - 1s 11ms/step - loss: 0.5990 - accuracy: 0.7242\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 211,
          "data": {
            "text/plain": "[0.5989661812782288, 0.7241770625114441]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 211,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-11T12:05:12.464Z",
          "iopub.execute_input": "2021-03-11T12:05:12.478Z",
          "iopub.status.idle": "2021-03-11T12:05:32.437Z",
          "shell.execute_reply": "2021-03-11T12:05:32.486Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#this is for 64 x 64 Image. The models trained above were for 32 x 32 Images\n",
        "vgg16 = models.Sequential([\n",
        "  layers.Conv2D(32, 3, 3, activation='relu', input_shape=(256, 256, 3), padding=\"same\"),\n",
        "  layers.Conv2D(32, 3, 3, activation='relu', padding=\"same\"),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64, 3, 3, activation='relu', padding=\"same\"),\n",
        "  layers.Conv2D(64, 3, 3, activation='relu', padding=\"same\"),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(128, 3, 3, activation='relu',  padding=\"same\"),\n",
        "  layers.Conv2D(128, 3, 3, activation='relu',  padding=\"same\"),\n",
        "#   layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(256, 3, 3, activation='relu',  padding=\"same\"),\n",
        "  layers.Conv2D(256, 3, 3, activation='relu',  padding=\"same\"),\n",
        "#   layers.MaxPooling2D((2,2)),\n",
        "  \n",
        "  layers.Flatten(),\n",
        "  layers.Dense(256, activation = 'relu'),\n",
        "  layers.Dropout(0.5),\n",
        "  \n",
        "  layers.Dense(256, activation = 'relu'),\n",
        "  layers.Dropout(0.5),\n",
        "  \n",
        "  layers.Dense(2, activation = 'sigmoid')\n",
        " \n",
        "  \n",
        "])"
      ],
      "outputs": [],
      "execution_count": 92,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:31:13.681Z",
          "iopub.execute_input": "2021-03-19T15:31:13.699Z",
          "shell.execute_reply": "2021-03-19T15:31:13.732Z",
          "iopub.status.idle": "2021-03-19T15:31:13.746Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vgg16.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "vgg16.fit(X_train, y_train, epochs = 8)\n",
        "vgg16.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n",
            "65/65 [==============================] - 6s 83ms/step - loss: 0.6934 - accuracy: 0.5153\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/8\n",
            "65/65 [==============================] - 6s 89ms/step - loss: 0.6939 - accuracy: 0.5037\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/8\n",
            "65/65 [==============================] - 15s 226ms/step - loss: 0.6948 - accuracy: 0.4645\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/8\n",
            "65/65 [==============================] - 15s 224ms/step - loss: 0.6933 - accuracy: 0.4939\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/8\n",
            "65/65 [==============================] - 15s 236ms/step - loss: 0.6934 - accuracy: 0.4924\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/8\n",
            "65/65 [==============================] - 16s 243ms/step - loss: 0.6935 - accuracy: 0.5111\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/8\n",
            "65/65 [==============================] - 16s 241ms/step - loss: 0.6935 - accuracy: 0.5014\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/8\n",
            "65/65 [==============================] - 16s 242ms/step - loss: 0.6934 - accuracy: 0.4852\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "28/28 [==============================] - 2s 65ms/step - loss: 0.6936 - accuracy: 0.4869\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 93,
          "data": {
            "text/plain": "[0.6936108469963074, 0.48694664239883423]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 93,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:31:14.784Z",
          "iopub.execute_input": "2021-03-19T15:31:14.797Z",
          "iopub.status.idle": "2021-03-19T15:33:00.909Z",
          "shell.execute_reply": "2021-03-19T15:33:00.988Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vgg = models.Sequential([\n",
        "  layers.Conv2D(32,(3,3), activation='relu', kernel_initializer = 'he_uniform', padding = 'same', input_shape=(32,32,3)),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(64,(3,3), activation='relu', kernel_initializer = 'he_uniform', padding = 'same'),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(128,(3,3), activation='relu', kernel_initializer = 'he_uniform', padding = 'same'),\n",
        "  layers.Dense(128, activation = 'relu', kernel_initializer = 'he_uniform'),\n",
        "  layers.Dense(2, activation = 'sigmoid')\n",
        "])"
      ],
      "outputs": [],
      "execution_count": 108,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:45:41.299Z",
          "iopub.execute_input": "2021-03-19T15:45:41.313Z",
          "iopub.status.idle": "2021-03-19T15:45:41.333Z",
          "shell.execute_reply": "2021-03-19T15:45:41.347Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.optimizers import SGD\n",
        "opt = SGD(lr = 0.01, momentum = 0.9)\n",
        "vgg.compile(optimizer = opt, loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "outputs": [],
      "execution_count": 109,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:45:46.659Z",
          "iopub.execute_input": "2021-03-19T15:45:46.676Z",
          "iopub.status.idle": "2021-03-19T15:45:46.696Z",
          "shell.execute_reply": "2021-03-19T15:45:46.708Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vgg.fit(X_train, y_train, epochs = 8)\n",
        "vgg.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 32, 32, 3) for input KerasTensor(type_spec=TensorSpec(shape=(None, 32, 32, 3), dtype=tf.float32, name='conv2d_203_input'), name='conv2d_203_input', description=\"created by layer 'conv2d_203_input'\"), but it was called on an input with incompatible shape (None, 256, 256, 3).\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "in user code:\n\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:805 train_function  *\n        return step_function(self, iterator)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:795 step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:1259 run\n        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:2730 call_for_each_replica\n        return self._call_for_each_replica(fn, args, kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:3417 _call_for_each_replica\n        return fn(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:788 run_step  **\n        outputs = model.train_step(data)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:755 train_step\n        loss = self.compiled_loss(\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\compile_utils.py:203 __call__\n        loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:152 __call__\n        losses = call_fn(y_true, y_pred)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:256 call  **\n        return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\util\\dispatch.py:201 wrapper\n        return target(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:1608 binary_crossentropy\n        K.binary_crossentropy(y_true, y_pred, from_logits=from_logits), axis=-1)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\util\\dispatch.py:201 wrapper\n        return target(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\backend.py:4979 binary_crossentropy\n        return nn.sigmoid_cross_entropy_with_logits(labels=target, logits=output)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\util\\dispatch.py:201 wrapper\n        return target(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\ops\\nn_impl.py:173 sigmoid_cross_entropy_with_logits\n        raise ValueError(\"logits and labels must have the same shape (%s vs %s)\" %\n\n    ValueError: logits and labels must have the same shape ((None, 64, 64, 2) vs (None, 1))\n",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[1;32m<ipython-input-110-482e2974cb95>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mvgg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mepochs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m8\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mvgg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[0;32m   1098\u001b[0m                 _r=1):\n\u001b[0;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1100\u001b[1;33m               \u001b[0mtmp_logs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1101\u001b[0m               \u001b[1;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args, **kwds)\u001b[0m\n\u001b[0;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    827\u001b[0m     \u001b[1;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 828\u001b[1;33m       \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"xla\"\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;34m\"nonXla\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py\u001b[0m in \u001b[0;36m_call\u001b[1;34m(self, *args, **kwds)\u001b[0m\n\u001b[0;32m    869\u001b[0m       \u001b[1;31m# This is the first call of __call__, so we have to initialize.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    870\u001b[0m       \u001b[0minitializers\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 871\u001b[1;33m       \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_initialize\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0madd_initializers_to\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0minitializers\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    872\u001b[0m     \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    873\u001b[0m       \u001b[1;31m# At this point we know that the initialization is complete (or less\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py\u001b[0m in \u001b[0;36m_initialize\u001b[1;34m(self, args, kwds, add_initializers_to)\u001b[0m\n\u001b[0;32m    723\u001b[0m     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_graph_deleter\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mFunctionDeleter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_lifted_initializer_graph\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    724\u001b[0m     self._concrete_stateful_fn = (\n\u001b[1;32m--> 725\u001b[1;33m         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access\n\u001b[0m\u001b[0;32m    726\u001b[0m             *args, **kwds))\n\u001b[0;32m    727\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\function.py\u001b[0m in \u001b[0;36m_get_concrete_function_internal_garbage_collected\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   2967\u001b[0m       \u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2968\u001b[0m     \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2969\u001b[1;33m       \u001b[0mgraph_function\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2970\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2971\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\function.py\u001b[0m in \u001b[0;36m_maybe_define_function\u001b[1;34m(self, args, kwargs)\u001b[0m\n\u001b[0;32m   3359\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3360\u001b[0m           \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_function_cache\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmissed\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcall_context_key\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3361\u001b[1;33m           \u001b[0mgraph_function\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_create_graph_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3362\u001b[0m           \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_function_cache\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mprimary\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mcache_key\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3363\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\function.py\u001b[0m in \u001b[0;36m_create_graph_function\u001b[1;34m(self, args, kwargs, override_flat_arg_shapes)\u001b[0m\n\u001b[0;32m   3194\u001b[0m     \u001b[0marg_names\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbase_arg_names\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mmissing_arg_names\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3195\u001b[0m     graph_function = ConcreteFunction(\n\u001b[1;32m-> 3196\u001b[1;33m         func_graph_module.func_graph_from_py_func(\n\u001b[0m\u001b[0;32m   3197\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3198\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_python_function\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\framework\\func_graph.py\u001b[0m in \u001b[0;36mfunc_graph_from_py_func\u001b[1;34m(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\u001b[0m\n\u001b[0;32m    988\u001b[0m         \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moriginal_func\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtf_decorator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munwrap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpython_func\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    989\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 990\u001b[1;33m       \u001b[0mfunc_outputs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpython_func\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mfunc_args\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfunc_kwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    991\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    992\u001b[0m       \u001b[1;31m# invariant: `func_outputs` contains only Tensors, CompositeTensors,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py\u001b[0m in \u001b[0;36mwrapped_fn\u001b[1;34m(*args, **kwds)\u001b[0m\n\u001b[0;32m    632\u001b[0m             \u001b[0mxla_context\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mExit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    633\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 634\u001b[1;33m           \u001b[0mout\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mweak_wrapped_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__wrapped__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    635\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    636\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mC:\\Python38\\lib\\site-packages\\tensorflow\\python\\framework\\func_graph.py\u001b[0m in \u001b[0;36mwrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    975\u001b[0m           \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m  \u001b[1;31m# pylint:disable=broad-except\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    976\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0me\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"ag_error_metadata\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 977\u001b[1;33m               \u001b[1;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0me\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    978\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    979\u001b[0m               \u001b[1;32mraise\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;31mValueError\u001b[0m: in user code:\n\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:805 train_function  *\n        return step_function(self, iterator)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:795 step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:1259 run\n        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:2730 call_for_each_replica\n        return self._call_for_each_replica(fn, args, kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\distribute\\distribute_lib.py:3417 _call_for_each_replica\n        return fn(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:788 run_step  **\n        outputs = model.train_step(data)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:755 train_step\n        loss = self.compiled_loss(\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\compile_utils.py:203 __call__\n        loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:152 __call__\n        losses = call_fn(y_true, y_pred)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:256 call  **\n        return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\util\\dispatch.py:201 wrapper\n        return target(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\losses.py:1608 binary_crossentropy\n        K.binary_crossentropy(y_true, y_pred, from_logits=from_logits), axis=-1)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\util\\dispatch.py:201 wrapper\n        return target(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\keras\\backend.py:4979 binary_crossentropy\n        return nn.sigmoid_cross_entropy_with_logits(labels=target, logits=output)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\util\\dispatch.py:201 wrapper\n        return target(*args, **kwargs)\n    C:\\Python38\\lib\\site-packages\\tensorflow\\python\\ops\\nn_impl.py:173 sigmoid_cross_entropy_with_logits\n        raise ValueError(\"logits and labels must have the same shape (%s vs %s)\" %\n\n    ValueError: logits and labels must have the same shape ((None, 64, 64, 2) vs (None, 1))\n"
          ]
        }
      ],
      "execution_count": 110,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T15:45:47.559Z",
          "iopub.execute_input": "2021-03-19T15:45:47.573Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tf.keras.applications.ResNet50(\n",
        "    include_top=True, weights='imagenet', input_tensor=None,\n",
        "    input_shape=None, pooling=None, classes=1000\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels.h5\n",
            "102973440/102967424 [==============================] - 31s 0us/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 135,
          "data": {
            "text/plain": "<tensorflow.python.keras.engine.functional.Functional at 0x29a5366cca0>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 135,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T16:03:23.361Z",
          "iopub.execute_input": "2021-03-19T16:03:23.378Z",
          "iopub.status.idle": "2021-03-19T16:03:56.381Z",
          "shell.execute_reply": "2021-03-19T16:03:56.406Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "cnn = models.Sequential([\n",
        "  layers.Conv2D(256, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(128, (3, 3), activation='relu'),\n",
        "  layers.MaxPooling2D((2,2)),\n",
        "  layers.Conv2D(256, (3, 3), activation='relu'),\n",
        "  layers.MaxPooling2D((2,2)),  \n",
        "#   layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "\n",
        "  layers.Flatten(),\n",
        "  layers.Dense(128, activation='sigmoid'),\n",
        "#   layers.Dropout(0.5),\n",
        "  layers.Dense(2,activation='softmax')\n",
        "])"
      ],
      "outputs": [],
      "execution_count": 163,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T17:32:21.962Z",
          "iopub.execute_input": "2021-03-19T17:32:21.978Z",
          "iopub.status.idle": "2021-03-19T17:32:22.001Z",
          "shell.execute_reply": "2021-03-19T17:32:22.013Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cnn.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "cnn.fit(X_train, y_train, epochs = 10)\n",
        "cnn.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "65/65 [==============================] - 7s 100ms/step - loss: 0.7233 - accuracy: 0.5159\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/10\n",
            "65/65 [==============================] - 6s 98ms/step - loss: 0.6585 - accuracy: 0.6120\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/10\n",
            "65/65 [==============================] - 6s 99ms/step - loss: 0.6034 - accuracy: 0.6705\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/10\n",
            "65/65 [==============================] - 6s 98ms/step - loss: 0.5646 - accuracy: 0.7049\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/10\n",
            "65/65 [==============================] - 7s 107ms/step - loss: 0.5369 - accuracy: 0.7154\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/10\n",
            "65/65 [==============================] - 7s 108ms/step - loss: 0.4987 - accuracy: 0.7504\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/10\n",
            "65/65 [==============================] - 7s 106ms/step - loss: 0.4955 - accuracy: 0.7617\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/10\n",
            "65/65 [==============================] - 7s 108ms/step - loss: 0.4619 - accuracy: 0.7725\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 9/10\n",
            "65/65 [==============================] - 7s 107ms/step - loss: 0.4393 - accuracy: 0.7869\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 10/10\n",
            "65/65 [==============================] - 7s 107ms/step - loss: 0.4058 - accuracy: 0.8179\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "28/28 [==============================] - 1s 28ms/step - loss: 0.5366 - accuracy: 0.7355\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 164,
          "data": {
            "text/plain": "[0.5366165637969971, 0.7355278134346008]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 164,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T17:32:22.537Z",
          "iopub.execute_input": "2021-03-19T17:32:22.553Z",
          "iopub.status.idle": "2021-03-19T17:33:31.718Z",
          "shell.execute_reply": "2021-03-19T17:33:31.757Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class ResidualUnit(keras.layers.Layer):\n",
        "  def __init__(self, filter, strides = 1, activation = \"relu\", **kwargs):\n",
        "    super().__init__(**kwargs)\n",
        "    self.activation = keras.activations.get(activation)\n",
        "    self.main_layers= [\n",
        "      keras.layers.Conv2D(filters, 3, strides = strides, padding = \"same\", use_bias = False),\n",
        "      keras.layers.BatchNormalization(),\n",
        "      self.activation,\n",
        "      keras.layers.Conv2D(filters,3,strides=1,padding=\"same\",use_bias=False),\n",
        "      keras.layers.BatchNormalization()\n",
        "    ]\n",
        "    self.skip_layers=[]\n",
        "    if strides > 1:\n",
        "      self.skip_layers = [\n",
        "        keras.layers.Conv2D(filters,1,strides=strides,padding=\"same\",use_bias=False),\n",
        "        keras.layers.BatchNormalization()\n",
        "      ]\n",
        "  def call(self, inputs):\n",
        "    Z = inputs\n",
        "    for layer in self.main_layers:\n",
        "      Z = layer(Z)\n",
        "    skip_Z = inputs\n",
        "    for layer in self.skip_layers:\n",
        "      skip_Z = layer(skip_Z)\n",
        "    return self.activation(Z+ skip_Z)"
      ],
      "outputs": [],
      "execution_count": 171,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T17:50:05.886Z",
          "iopub.execute_input": "2021-03-19T17:50:05.908Z",
          "iopub.status.idle": "2021-03-19T17:50:05.936Z",
          "shell.execute_reply": "2021-03-19T17:50:05.963Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "resnet = keras.models.Sequential()\n",
        "resnet.add(keras.layers.Conv2D(64,7,strides=2,input_shape=[224,224,3], padding = \"same\", use_bias = False))\n",
        "resnet.add(keras.layers.BatchNormalization())\n",
        "resnet.add(keras.layers.Activation(\"relu\"))\n",
        "resnet.add(keras.layers.MaxPooling2D(pool_size = 3, strides = 2, padding = \"same\"))\n",
        "prev_filters = 64\n",
        "for filters in [64]*3 + [128]*4 + [256]*6 + [512]*3:\n",
        "  strides = 1 if filters == prev_filters else 2\n",
        "  resnet.add(ResidualUnit(filters,strides = strides))\n",
        "  prev_filters = filters\n",
        "resnet.add(keras.layers.GlobalAvgPool2D())\n",
        "resnet.add(keras.layers.Flatten())\n",
        "resnet.add(keras.layers.Dense(2, activation=\"softmax\"))"
      ],
      "outputs": [],
      "execution_count": 186,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T18:15:40.985Z",
          "iopub.execute_input": "2021-03-19T18:15:41.015Z",
          "iopub.status.idle": "2021-03-19T18:15:41.944Z",
          "shell.execute_reply": "2021-03-19T18:15:41.916Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "resnet.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "resnet.fit(X_train, y_train, epochs = 10)\n",
        "resnet.evaluate(X_test, y_test)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "65/65 [==============================] - 1138s 17s/step - loss: 1.4815 - accuracy: 0.5834\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 2/10\n",
            "65/65 [==============================] - 1254s 19s/step - loss: 0.5970 - accuracy: 0.7080\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 3/10\n",
            "65/65 [==============================] - 1475s 23s/step - loss: 0.5762 - accuracy: 0.7127\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 4/10\n",
            "65/65 [==============================] - 729s 11s/step - loss: 0.5907 - accuracy: 0.6918\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 5/10\n",
            "65/65 [==============================] - 686s 11s/step - loss: 0.5486 - accuracy: 0.7172\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 6/10\n",
            "65/65 [==============================] - 717s 11s/step - loss: 0.5284 - accuracy: 0.7302\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 7/10\n",
            "65/65 [==============================] - 656s 10s/step - loss: 0.5301 - accuracy: 0.7295\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 8/10\n",
            "65/65 [==============================] - 715s 11s/step - loss: 0.5336 - accuracy: 0.7294\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 9/10\n",
            "65/65 [==============================] - 715s 11s/step - loss: 0.5382 - accuracy: 0.7270\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "Epoch 10/10\n",
            "65/65 [==============================] - 709s 11s/step - loss: 0.5106 - accuracy: 0.7410\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
            "28/28 [==============================] - 81s 3s/step - loss: 0.8634 - accuracy: 0.5664\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 187,
          "data": {
            "text/plain": "[0.8634020090103149, 0.5664018392562866]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 187,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2021-03-19T18:15:41.975Z",
          "iopub.execute_input": "2021-03-19T18:15:41.997Z",
          "iopub.status.idle": "2021-03-19T20:43:37.951Z",
          "shell.execute_reply": "2021-03-19T20:43:38.156Z"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python38264bit88792cbf137748e7b0da9eff936c2dd8"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.2",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernelspec": {
      "argv": [
        "C:\\Python38\\python.exe",
        "-m",
        "ipykernel_launcher",
        "-f",
        "{connection_file}"
      ],
      "display_name": "Python 3.8.2 64-bit",
      "env": {},
      "language": "python",
      "metadata": {
        "interpreter": {
          "architecture": 3,
          "companyDisplayName": "Python Software Foundation",
          "displayName": "Python 3.8.2 64-bit",
          "fileHash": "4d912e1c1288e66696581ca11216a7a0add364e81372506c8f313cbdfba7fc6d6f736e34b609058f5e5141f5e7afd101f867ebe8b43b3c5ef787fdf1ddc52f07",
          "path": "C:\\Python38\\python.exe",
          "sysPrefix": "C:\\Python38",
          "type": "Unknown",
          "version": {
            "prerelease": [
              "final"
            ],
            "raw": "3.8.2-final",
            "patch": 2,
            "build": [],
            "minor": 8,
            "version": "3.8.2-final",
            "major": 3,
            "options": {
              "includePrerelease": false,
              "loose": false
            },
            "loose": false
          }
        }
      },
      "name": "python38264bit88792cbf137748e7b0da9eff936c2dd8"
    },
    "nteract": {
      "version": "0.28.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
